// AUTOGENERATED FILE (not)
// Everything here has its meaning, don't let golang-ci ruin them

package hub

import (
	"context"
	"crypto/ecdsa"
	"crypto/rand"
	"fmt"
	"github.com/rss3-network/gateway-common/accesslog"
	"github.com/rss3-network/gateway-common/control"
	"github.com/rss3-network/payment-processor/internal/service/hub/processors"
	"log"
	"net/http"
	"strconv"
	"strings"
	"testing"
	"time"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/gavv/httpexpect/v2"
	"github.com/golang-jwt/jwt/v5"
	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/redis/go-redis/v9"
	"github.com/rss3-network/payment-processor/internal/config"
	"github.com/rss3-network/payment-processor/internal/database"
	"github.com/rss3-network/payment-processor/internal/database/dialer"
	"github.com/rss3-network/payment-processor/internal/database/dialer/postgresql/table"
	"github.com/rss3-network/payment-processor/internal/service/hub/handlers"
	jwtImpl "github.com/rss3-network/payment-processor/internal/service/hub/jwt"
	"github.com/rss3-network/payment-processor/internal/service/hub/model"
	"github.com/rss3-network/payment-processor/internal/service/hub/siwe"
	"github.com/stretchr/testify/assert"
	"gorm.io/gorm"
)

var (
	handler http.Handler

	expiredAuthToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZGRyZXNzIjoiMHg3NUQyMjQzMUUxYjQ1OTBDNDg2ODRCQzBBOTY3YTI1NEQ2MjMwMzBiIiwiZXhwIjoxNjkxNTYyOTg1fQ.01fPPdUj6cRthQ-66AdEX3gmPEeKCGNiaiauyWdrP0s" // #nosec G101

	validAuthToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZGRyZXNzIjoiMHhmMkY2ZTI4NkI2MmRlNEEwQjM2ODczMjcxQzAxNThlMTU4REZhYmU3IiwiY2hhaW5faWQiOjEsImV4cCI6MjAwNjkzODM1Mn0.lUdTv8nHuEu3rGT7BbXV-4GtiKKG98Rz9hCGeUS_apw" // #nosec G101
	validAddress   = common.HexToAddress("0xf2F6e286B62de4A0B36873271C0158e158DFabe7")

	fakeUserAddr = common.HexToAddress("0x0000000000000000000000000000000000000000")
)

var (
	handlerApp   *handlers.App
	processorApp *processors.App

	redisClient    *redis.Client
	databaseClient *gorm.DB
	jwtClient      *jwtImpl.JWT
	siweClient     *siwe.SIWE
	controlClient  *control.StateClientWriter
)

const (
	JwtKey = "abcdefg1234567"
)

func init() {
	// Prepare databaseClient
	dbc, err := dialer.Dial(context.Background(), &config.Database{
		Driver: database.DriverPostgreSQL,
		URI:    "postgres://postgres:dev@localhost:5432/postgres",
	})
	if err != nil {
		log.Panic(err)
	}
	err = dbc.Migrate(context.Background())
	if err != nil {
		log.Panic(err)
	}
	databaseClient = dbc.Raw()

	// Prepare redisClient
	rc, err := redis.ParseURL("redis://localhost:6379/0")
	if err != nil {
		log.Panic(err)
	}
	redisClient = redis.NewClient(rc)

	// Initialize controlClient configurations
	controlClient, err = control.NewWriter([]string{"localhost:2379"}, nil, nil)
	if err != nil {
		log.Panic(err)
	}

	// Prepare JWT
	jwtClient, err = jwtImpl.New(JwtKey)
	if err != nil {
		log.Panic(err)
	}

	// Prepare SIWE
	siweClient, err = siwe.New("localhost:3000", redisClient)
	if err != nil {
		log.Panic(err)
	}

	// Prepare processor
	processorApp, err = processors.NewApp(controlClient, databaseClient)
	if err != nil {
		log.Panic(err)
	}

	// Prepare echo
	e := echo.New()
	handlerApp, err = handlers.NewApp(
		controlClient,
		redisClient,
		databaseClient,
		jwtClient,
		siweClient,
	)
	if err != nil {
		log.Panic(err)
	}

	// Configure middlewares
	configureMiddlewares(false, e, handlerApp, jwtClient, databaseClient, controlClient)

	handler = e.Server.Handler
}

func setup() {
	// Nothing to do for now
}

func tearDown() {
	ctx := context.Background()

	// clear tables
	sqls := []string{
		`DELETE FROM consumption_log CASCADE;`,
		`DELETE FROM key CASCADE;`,
		`DELETE FROM pending_withdraw_request CASCADE;`,
		`DELETE FROM account CASCADE;`,
		`DELETE FROM br_collected CASCADE;`,
		`DELETE FROM br_deposited CASCADE;`,
		`DELETE FROM br_withdrawn CASCADE;`,
	}
	for _, sql := range sqls {
		if strings.TrimSpace(sql) == "" {
			continue
		}
		databaseClient.Exec(sql)
	}

	// clear redis
	redisClient.FlushAll(ctx)
}

// opts: authToken, Content-Type
// defaults: address=validAddress; Content-Type=application/json
func getAuth(t *testing.T, opts ...string) *httpexpect.Expect {
	e := httpexpect.WithConfig(httpexpect.Config{
		Client: &http.Client{
			Transport: httpexpect.NewBinder(handler),
			Jar:       httpexpect.NewCookieJar(),
		},
		Reporter: httpexpect.NewAssertReporter(t),
	})

	defaults := []string{validAuthToken, "application/json"}
	for index, opt := range opts {
		defaults[index] = opt
	}
	authToken, contentType := defaults[0], defaults[1]

	return e.Builder(func(r *httpexpect.Request) {
		r.WithHeader("Content-Type", contentType)
		if authToken != "" {
			r.WithCookie("auth_token", authToken)
		}
	})
}

func setupAccount() model.Account {
	ctx := context.Background()
	acc, err := model.AccountCreate(ctx, validAddress, databaseClient, controlClient)
	if err != nil {
		panic(err)
	}
	return *acc
}

func tearDownAccount() {
	err := databaseClient.Delete(&table.GatewayAccount{
		Address: validAddress,
	}).Error
	if err != nil {
		panic(err)
	}
}

func signHash(data []byte) common.Hash {
	msg := fmt.Sprintf("\x19Ethereum Signed Message:\n%d%s", len(data), data)
	return crypto.Keccak256Hash([]byte(msg))
}

func signMessage(message string, privateKey *ecdsa.PrivateKey) ([]byte, error) {
	sign := signHash([]byte(message))
	signature, err := crypto.Sign(sign.Bytes(), privateKey)

	if err != nil {
		return nil, err
	}

	signature[64] += 27
	return signature, nil
}

func constructMessage(domain string, nonce string, when time.Time, address string) string {
	return fmt.Sprintf("%s wants you to sign in with your Ethereum account:\n%s\n\nSign In With Ethereum to prove you control this wallet.\n\nURI: http://%s\nVersion: 1\nChain ID: 1\nNonce: %s\nIssued At: %s",
		domain,
		address,
		domain,
		nonce,
		when.Format("2006-01-02T15:04:05.999Z"),
	)
}

func Test_SIWEAuth(t *testing.T) {
	setup()
	defer tearDown()

	ctx := context.Background()

	privateKey, err := ecdsa.GenerateKey(crypto.S256(), rand.Reader)
	assert.NoError(t, err)
	publicKey := privateKey.PublicKey
	addressRaw := crypto.PubkeyToAddress(publicKey)
	address := addressRaw.Hex()
	_, exist, err := model.AccountGetByAddress(ctx, addressRaw, databaseClient, controlClient)
	assert.False(t, exist)
	assert.NoError(t, err)

	now := time.Now()

	// 400 empty
	getAuth(t, "").POST("/users/siwe/verify").WithJSON(map[string]any{}).Expect().Status(http.StatusBadRequest)

	wrongSignature := "0x4033e439566439d0cb5ca8c9412f0932e06f6d125db0415bf342a274f9985aa352083dd361d3b238777356af2b993601601d87f1da3a3da381eaf38394ee957d1c"

	// 401 wrong domain
	nonce := getAuth(t, "").GET("/users/siwe/nonce").Expect().Status(http.StatusOK).Text()
	msg := constructMessage("localhost:3001", nonce.Raw(), now, address)
	getAuth(t, "").POST("/users/siwe/verify").WithJSON(map[string]any{
		"message":   msg,
		"signature": wrongSignature,
	}).Expect().Status(http.StatusUnauthorized)

	// 401 invalid signature format
	nonce = getAuth(t, "").GET("/users/siwe/nonce").Expect().Status(http.StatusOK).Text()
	msg = constructMessage("localhost:3000", nonce.Raw(), now, address)
	// using an invalid signature
	getAuth(t, "").POST("/users/siwe/verify").WithJSON(map[string]any{
		"message":   msg,
		"signature": "0x.......",
	}).Expect().Status(http.StatusUnauthorized)

	// 401 wrong address
	nonce = getAuth(t, "").GET("/users/siwe/nonce").Expect().Status(http.StatusOK).Text()
	msg = constructMessage("localhost:3000", nonce.Raw(), now, address)
	// using an unmatched signature
	getAuth(t, "").POST("/users/siwe/verify").WithJSON(map[string]any{
		"message":   msg,
		"signature": wrongSignature,
	}).Expect().Status(http.StatusUnauthorized)

	// 401 no such nonce
	// using old (consumed) nonce
	// using old message
	signature, err := signMessage(msg, privateKey)
	assert.NotEmpty(t, signature)
	assert.NoError(t, err)
	getAuth(t, "").POST("/users/siwe/verify").WithJSON(map[string]any{
		"message":   msg,
		"signature": hexutil.Encode(signature),
	}).Expect().Status(http.StatusUnauthorized)

	// 200: create user (full flow)
	nonce = getAuth(t, "").GET("/users/siwe/nonce").Expect().Status(http.StatusOK).Text()
	msg = constructMessage("localhost:3000", nonce.Raw(), now, address)
	signature, err = signMessage(msg, privateKey)
	assert.NotEmpty(t, signature)
	assert.NoError(t, err)
	cookie := getAuth(t, "").POST("/users/siwe/verify").WithJSON(map[string]any{
		"message":   msg,
		"signature": hexutil.Encode(signature),
	}).Expect().Status(http.StatusOK).Cookie("auth_token").Raw()

	// check cookie
	getAuth(t, cookie.Value).GET("/ru/status").Expect().Status(http.StatusOK)
	// parse jwt
	token, err := jwt.Parse(cookie.Value, func(token *jwt.Token) (interface{}, error) {
		return []byte(JwtKey), nil
	})
	assert.NoError(t, err)
	assert.True(t, token.Valid)
	claims := token.Claims.(jwt.MapClaims)
	assert.Equal(t, address, claims["address"])
	user, exist, err := model.AccountGetByAddress(ctx, addressRaw, databaseClient, controlClient)
	assert.NoError(t, err)
	assert.True(t, exist)
	assert.Equal(t, user.Address.Hex(), claims["address"])

	// check expired cookie
	getAuth(t, expiredAuthToken).GET("/ru/status").Expect().Status(http.StatusUnauthorized)

	// check logout
	getAuth(t, cookie.Value).GET("/users/siwe/logout").Expect().Status(http.StatusOK)
}

func Test_KeyAndRU(t *testing.T) {
	setup()
	defer tearDown()
	setupAccount()
	defer tearDownAccount()

	ctx := context.Background()
	client := getAuth(t)

	// get empty status
	client.GET("/ru/status").Expect().Status(http.StatusOK).
		JSON().Object().IsEqual(map[string]any{
		"ru_limit":          0,
		"ru_used_total":     0,
		"ru_used_current":   0,
		"api_calls_total":   0,
		"api_calls_current": 0,
	})

	// generate key
	obj := client.POST("/key").WithJSON(map[string]any{
		"name": "new key",
	}).Expect().Status(http.StatusOK).
		JSON().Object()
	obj.Value("key").String().NotEmpty()
	obj.Value("key").String().Length().IsEqual(36)
	obj.Value("ru_used_total").IsEqual(0)
	obj.Value("ru_used_current").IsEqual(0)
	obj.Value("api_calls_total").IsEqual(0)
	obj.Value("api_calls_current").IsEqual(0)
	obj.Value("name").IsEqual("new key")

	// still empty status
	client.GET("/ru/status").Expect().Status(http.StatusOK).
		JSON().Object().IsEqual(map[string]any{
		"ru_limit":          0,
		"ru_used_total":     0,
		"ru_used_current":   0,
		"api_calls_total":   0,
		"api_calls_current": 0,
	})

	keyId := obj.Value("id").String()
	// get key
	client.GET("/key/" + keyId.Raw()).Expect().Status(http.StatusOK).
		JSON().Object().IsEqual(map[string]any{
		"id":                keyId.Raw(),
		"key":               obj.Value("key").String().Raw(),
		"name":              "new key",
		"ru_used_total":     0,
		"ru_used_current":   0,
		"api_calls_total":   0,
		"api_calls_current": 0,
	})

	// incr ru_used and api_calls
	keyUUID, err := uuid.Parse(obj.Value("key").String().Raw())
	assert.NoError(t, err)
	err = databaseClient.Model(&table.GatewayKey{}).Where("key = ?", keyUUID).Updates(map[string]interface{}{
		"api_calls_current": gorm.Expr("api_calls_current + ?", 2),
		"ru_used_current":   gorm.Expr("ru_used_current + ?", 3),
	}).Error
	assert.NoError(t, err)
	client.GET("/key/" + obj.Value("id").String().Raw()).Expect().Status(http.StatusOK).
		JSON().Object().IsEqual(map[string]any{
		"id":                obj.Value("id").String().Raw(),
		"key":               obj.Value("key").String().Raw(),
		"name":              "new key",
		"ru_used_total":     0,
		"ru_used_current":   3,
		"api_calls_total":   0,
		"api_calls_current": 2,
	})

	// check status
	client.GET("/ru/status").Expect().Status(http.StatusOK).
		JSON().Object().IsEqual(map[string]any{
		"ru_limit":          0,
		"ru_used_total":     0,
		"ru_used_current":   3,
		"api_calls_total":   0,
		"api_calls_current": 2,
	})

	// generate new key
	obj = client.POST("/key").WithJSON(map[string]any{
		"name": "new key 2",
	}).Expect().Status(http.StatusOK).
		JSON().Object()
	obj.Value("key").String().NotEmpty()
	obj.Value("key").String().Length().IsEqual(36)
	obj.Value("ru_used_current").IsEqual(0)
	obj.Value("ru_used_total").IsEqual(0)
	obj.Value("api_calls_current").IsEqual(0)
	obj.Value("api_calls_total").IsEqual(0)
	var keyCounts int64
	err = databaseClient.Model(&table.GatewayKey{}).Count(&keyCounts).Error
	assert.NoError(t, err)
	assert.Equal(t, int64(2), keyCounts)
	user, exist, err := model.AccountGetByAddress(ctx, validAddress, databaseClient, controlClient)
	assert.NoError(t, err)
	assert.True(t, exist)
	client.GET("/key/" + obj.Value("id").String().Raw()).Expect().Status(http.StatusOK).
		JSON().Object().IsEqual(map[string]any{
		"id":                obj.Value("id").String().Raw(),
		"key":               obj.Value("key").String().Raw(),
		"name":              "new key 2",
		"ru_used_total":     0,
		"ru_used_current":   0,
		"api_calls_total":   0,
		"api_calls_current": 0,
	})

	// status still the same
	client.GET("/ru/status").Expect().Status(http.StatusOK).
		JSON().Object().IsEqual(map[string]any{
		"ru_limit":          0,
		"ru_used_total":     0,
		"ru_used_current":   3,
		"api_calls_total":   0,
		"api_calls_current": 2,
	})

	// create new account with key
	fakeUser, err := model.AccountCreate(ctx, fakeUserAddr, databaseClient, controlClient)
	assert.NoError(t, err)
	fakeUserKey, err := model.KeyCreate(ctx, fakeUser.Address, "fake key", databaseClient, controlClient)
	assert.NoError(t, err)
	err = databaseClient.Model(&table.GatewayKey{}).Count(&keyCounts).Error
	assert.NoError(t, err)
	assert.Equal(t, int64(3), keyCounts)
	err = databaseClient.Model(&table.GatewayKey{}).Where("id = ?", fakeUserKey.ID).Update("ru_used_current", 100).Error
	assert.NoError(t, err)
	_, ruu, _, apicalls, err := fakeUser.GetUsage(ctx)
	assert.NoError(t, err)
	assert.EqualValues(t, ruu, 100)
	assert.EqualValues(t, apicalls, 0)

	// get other user key
	client.GET("/key/" + strconv.Itoa(int(fakeUserKey.ID))).Expect().Status(http.StatusNotFound)

	// status still the same
	client.GET("/ru/status").Expect().Status(http.StatusOK).
		JSON().Object().IsEqual(map[string]any{
		"ru_limit":          0,
		"ru_used_total":     0,
		"ru_used_current":   3,
		"api_calls_total":   0,
		"api_calls_current": 2,
	})

	// get keys
	objs := client.GET("/keys").Expect().Status(http.StatusOK).
		JSON().Array()
	objs.Length().IsEqual(2)
	dbKeys, err := user.ListKeys(ctx)
	assert.NoError(t, err)
	assert.Equal(t, len(dbKeys), 2)
	dbKeyStrs := make([]string, 2)
	for i, k := range dbKeys {
		dbKeyStrs[i] = k.Key.String()
	}
	for _, obj := range objs.Iter() {
		obj.Object().Value("key").String().NotEmpty()
		assert.Contains(t, dbKeyStrs, obj.Object().Value("key").String().Raw())
	}

	// check is RU remain greater than 0
	result, err := user.GetBalance(ctx)
	assert.NoError(t, err)
	assert.False(t, result > 0)
	assert.EqualValues(t, result, -3)

	// rename key
	obj = client.PUT("/key/" + obj.Value("id").String().Raw()).WithJSON(map[string]any{
		"name": "new key name",
	}).Expect().Status(http.StatusOK).
		JSON().Object()
	obj.Value("name").IsEqual("new key name")

	oldKey := obj.Value("key").String().Raw()

	// rotate key
	obj = client.PATCH("/key/" + obj.Value("id").String().Raw()).
		Expect().Status(http.StatusOK).
		JSON().Object()
	obj.Value("key").NotEqual(oldKey)

	// delete key no Auth
	getAuth(t, "").DELETE("/key/" + obj.Value("id").String().Raw()).Expect().Status(http.StatusUnauthorized)
	// delete key
	client.DELETE("/key/" + obj.Value("id").String().Raw()).Expect().Status(http.StatusOK)
	objs = client.GET("/keys").Expect().Status(http.StatusOK).
		JSON().Array()
	objs.Length().IsEqual(1)
	result, err = user.GetBalance(ctx)
	assert.EqualValues(t, -3, result)
	// delete key no key
	client.DELETE("/key/" + obj.Value("id").String().Raw()).Expect().Status(http.StatusNotFound).
		JSON().Object().Value("msg").String().Contains("Not Found")
}

func Test_RequestWithdraw(t *testing.T) {
	setup()
	defer tearDown()
	setupAccount()
	defer tearDownAccount()

	client := getAuth(t)

	// Get current withdrawal amount
	client.GET("/request/withdraw").Expect().Status(http.StatusOK).
		JSON().Object().IsEqual(map[string]any{
		"amount": 0,
	})

	var pendingWithdrawRequestCount int64
	err := databaseClient.Model(&table.GatewayPendingWithdrawRequest{}).Count(&pendingWithdrawRequestCount).Error
	assert.NoError(t, err)
	assert.Equal(t, pendingWithdrawRequestCount, int64(0))

	// Create a withdrawal request
	amount1 := float64(10)
	client.POST("/request/withdraw").WithQuery("amount", amount1).Expect().Status(http.StatusOK)

	client.GET("/request/withdraw").Expect().Status(http.StatusOK).
		JSON().Object().IsEqual(map[string]any{
		"amount": amount1,
	})

	err = databaseClient.Model(&table.GatewayPendingWithdrawRequest{}).Count(&pendingWithdrawRequestCount).Error
	assert.NoError(t, err)
	assert.Equal(t, pendingWithdrawRequestCount, int64(1))

	// Update withdrawal request
	amount2 := 20.5
	client.POST("/request/withdraw").WithQuery("amount", amount2).Expect().Status(http.StatusOK)

	client.GET("/request/withdraw").Expect().Status(http.StatusOK).
		JSON().Object().IsEqual(map[string]any{
		"amount": amount2,
	})

	err = databaseClient.Model(&table.GatewayPendingWithdrawRequest{}).Count(&pendingWithdrawRequestCount).Error
	assert.NoError(t, err)
	assert.Equal(t, pendingWithdrawRequestCount, int64(1))

	// Unset withdrawal request
	client.POST("/request/withdraw").WithQuery("amount", 0).Expect().Status(http.StatusOK)

	client.GET("/request/withdraw").Expect().Status(http.StatusOK).
		JSON().Object().IsEqual(map[string]any{
		"amount": 0,
	})

	err = databaseClient.Model(&table.GatewayPendingWithdrawRequest{}).Count(&pendingWithdrawRequestCount).Error
	assert.NoError(t, err)
	assert.Equal(t, pendingWithdrawRequestCount, int64(0))

	// Set again

	client.POST("/request/withdraw").WithQuery("amount", amount2).Expect().Status(http.StatusOK)

	client.GET("/request/withdraw").Expect().Status(http.StatusOK).
		JSON().Object().IsEqual(map[string]any{
		"amount": amount2,
	})

	err = databaseClient.Model(&table.GatewayPendingWithdrawRequest{}).Count(&pendingWithdrawRequestCount).Error
	assert.NoError(t, err)
	assert.Equal(t, pendingWithdrawRequestCount, int64(1))

	// Unset again with negative amount
	client.POST("/request/withdraw").WithQuery("amount", -1).Expect().Status(http.StatusOK)

	client.GET("/request/withdraw").Expect().Status(http.StatusOK).
		JSON().Object().IsEqual(map[string]any{
		"amount": 0,
	})
}

func Test_HealthCheck(t *testing.T) {
	setup()
	defer tearDown()

	noUser := getAuth(t, "")

	noUser.GET("/health").Expect().Status(http.StatusBadRequest)

	noUser.GET("/health").WithQuery("type", "readiness").Expect().Status(http.StatusOK)
	noUser.GET("/health").WithQuery("type", "liveness").Expect().Status(http.StatusOK)
}

func Test_JWTSign(t *testing.T) {
	token, err := jwtClient.SignToken(&jwtImpl.User{
		Address: validAddress,
		ChainID: 1,
		Expires: 2006938352,
	})
	assert.Nil(t, err)
	assert.NotEmpty(t, token)

	t.Log(token)
}

func Test_ProcessAccessLog(t *testing.T) {
	setup()
	defer tearDown()

	ctx := context.Background()

	// Create test account and add some RU
	fakeUser, err := model.AccountCreate(ctx, fakeUserAddr, databaseClient, controlClient)
	assert.NoError(t, err)
	err = databaseClient.Model(&table.GatewayAccount{}).Where("address = ?", fakeUser.Address).Update("ru_limit", 100).Error
	assert.NoError(t, err)
	fakeUser, exist, err := model.AccountGetByAddress(ctx, fakeUser.Address, databaseClient, controlClient)
	assert.NoError(t, err)
	assert.True(t, exist)
	assert.Equal(t, int64(100), fakeUser.RuLimit)

	// Create test key
	fakeUserKey, err := model.KeyCreate(ctx, fakeUser.Address, "fake key", databaseClient, controlClient)
	assert.NoError(t, err)
	fakeUserKey, exist, err = fakeUser.GetKey(ctx, fakeUserKey.ID)
	assert.True(t, exist)
	assert.Equal(t, int64(0), fakeUserKey.RuUsedCurrent)

	// Mock some request logs
	keyID := strconv.FormatUint(fakeUserKey.ID, 10)
	time1, err := time.Parse(time.RFC3339, "2023-11-01T08:13:18Z")
	assert.NoError(t, err)
	time2, err := time.Parse(time.RFC3339, "2023-11-01T08:13:27Z")
	assert.NoError(t, err)
	time3, err := time.Parse(time.RFC3339, "2023-11-01T08:13:43Z")
	assert.NoError(t, err)

	requestLogs := []accesslog.Log{
		{ // Should be billed
			KeyID:     &keyID,
			Timestamp: time1,
			Path:      "/data/accounts/activities",
			Status:    200,
		},
		{ // Should not be billed
			KeyID:     &keyID,
			Timestamp: time2,
			Path:      "/data/accounts/activities",
			Status:    500,
		},
		{ // Should not panic
			Path:      "/data/accounts/activities",
			Timestamp: time3,
			Status:    401,
		},
	}

	for _, reqLog := range requestLogs {
		processorApp.ProcessAccessLog(&reqLog)
	}

	// Check RU consumption
	fakeUser, exist, err = model.AccountGetByAddress(ctx, fakeUser.Address, databaseClient, controlClient)
	assert.NoError(t, err)
	assert.True(t, exist)
	assert.Equal(t, int64(100), fakeUser.RuLimit)
	fakeUserKey, exist, err = fakeUser.GetKey(ctx, fakeUserKey.ID)
	assert.NoError(t, err)
	assert.True(t, exist)
	assert.Equal(t, int64(1), fakeUserKey.RuUsedCurrent)

	_, ruUsedCurrent, _, apiCallsCurrent, err := fakeUser.GetUsage(ctx)
	assert.NoError(t, err)
	assert.Equal(t, int64(1), ruUsedCurrent)
	assert.Equal(t, int64(2), apiCallsCurrent)
}
